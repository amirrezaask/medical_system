// Code generated by entc, DO NOT EDIT.

package prescription

import (
	"medical_system/database/models/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DoctorID applies equality check predicate on the "doctor_id" field. It's identical to DoctorIDEQ.
func DoctorID(v int64) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorID), v))
	})
}

// PatientNationalCode applies equality check predicate on the "patient_national_code" field. It's identical to PatientNationalCodeEQ.
func PatientNationalCode(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientNationalCode), v))
	})
}

// DrugsCommaSeperated applies equality check predicate on the "drugs_comma_seperated" field. It's identical to DrugsCommaSeperatedEQ.
func DrugsCommaSeperated(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DoctorIDEQ applies the EQ predicate on the "doctor_id" field.
func DoctorIDEQ(v int64) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoctorID), v))
	})
}

// DoctorIDNEQ applies the NEQ predicate on the "doctor_id" field.
func DoctorIDNEQ(v int64) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoctorID), v))
	})
}

// DoctorIDIn applies the In predicate on the "doctor_id" field.
func DoctorIDIn(vs ...int64) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDoctorID), v...))
	})
}

// DoctorIDNotIn applies the NotIn predicate on the "doctor_id" field.
func DoctorIDNotIn(vs ...int64) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDoctorID), v...))
	})
}

// DoctorIDGT applies the GT predicate on the "doctor_id" field.
func DoctorIDGT(v int64) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoctorID), v))
	})
}

// DoctorIDGTE applies the GTE predicate on the "doctor_id" field.
func DoctorIDGTE(v int64) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoctorID), v))
	})
}

// DoctorIDLT applies the LT predicate on the "doctor_id" field.
func DoctorIDLT(v int64) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoctorID), v))
	})
}

// DoctorIDLTE applies the LTE predicate on the "doctor_id" field.
func DoctorIDLTE(v int64) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoctorID), v))
	})
}

// PatientNationalCodeEQ applies the EQ predicate on the "patient_national_code" field.
func PatientNationalCodeEQ(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeNEQ applies the NEQ predicate on the "patient_national_code" field.
func PatientNationalCodeNEQ(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeIn applies the In predicate on the "patient_national_code" field.
func PatientNationalCodeIn(vs ...string) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPatientNationalCode), v...))
	})
}

// PatientNationalCodeNotIn applies the NotIn predicate on the "patient_national_code" field.
func PatientNationalCodeNotIn(vs ...string) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPatientNationalCode), v...))
	})
}

// PatientNationalCodeGT applies the GT predicate on the "patient_national_code" field.
func PatientNationalCodeGT(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeGTE applies the GTE predicate on the "patient_national_code" field.
func PatientNationalCodeGTE(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeLT applies the LT predicate on the "patient_national_code" field.
func PatientNationalCodeLT(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeLTE applies the LTE predicate on the "patient_national_code" field.
func PatientNationalCodeLTE(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeContains applies the Contains predicate on the "patient_national_code" field.
func PatientNationalCodeContains(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeHasPrefix applies the HasPrefix predicate on the "patient_national_code" field.
func PatientNationalCodeHasPrefix(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeHasSuffix applies the HasSuffix predicate on the "patient_national_code" field.
func PatientNationalCodeHasSuffix(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeEqualFold applies the EqualFold predicate on the "patient_national_code" field.
func PatientNationalCodeEqualFold(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPatientNationalCode), v))
	})
}

// PatientNationalCodeContainsFold applies the ContainsFold predicate on the "patient_national_code" field.
func PatientNationalCodeContainsFold(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPatientNationalCode), v))
	})
}

// DrugsCommaSeperatedEQ applies the EQ predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedEQ(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedNEQ applies the NEQ predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedNEQ(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedIn applies the In predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedIn(vs ...string) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDrugsCommaSeperated), v...))
	})
}

// DrugsCommaSeperatedNotIn applies the NotIn predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedNotIn(vs ...string) predicate.Prescription {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Prescription(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDrugsCommaSeperated), v...))
	})
}

// DrugsCommaSeperatedGT applies the GT predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedGT(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedGTE applies the GTE predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedGTE(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedLT applies the LT predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedLT(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedLTE applies the LTE predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedLTE(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedContains applies the Contains predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedContains(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedHasPrefix applies the HasPrefix predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedHasPrefix(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedHasSuffix applies the HasSuffix predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedHasSuffix(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedEqualFold applies the EqualFold predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedEqualFold(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDrugsCommaSeperated), v))
	})
}

// DrugsCommaSeperatedContainsFold applies the ContainsFold predicate on the "drugs_comma_seperated" field.
func DrugsCommaSeperatedContainsFold(v string) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDrugsCommaSeperated), v))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		p(s.Not())
	})
}
